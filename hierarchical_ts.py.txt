import pandas as pd

data = pd.read_csv("data.csv")
data = data[data.ESTAB_NAME != 'NAMPULA']

# define hierarchical structure
# ESTAB_NAME -> NAME_FAM -> NAME_SUB_FAM -> REF

#data = data[["ESTAB_NAME", "NAME_FAM", "NAME_SUBFAM", "Ref"]]
data = data.groupby(["MonthYear", "NAME_SUBFAM"])["PROFIT_SALES"].sum().reset_index()
#data["MonthYear"] = pd.to_datetime(data["MonthYear"])

#data = data.set_index("MonthYear")

spec = [["ESTAB_NAME"],
        ["ESTAB_NAME", "NAME_FAM"],
        ["ESTAB_NAME", "NAME_FAM", "NAME_SUBFAM"],
        ["ESTAB_NAME", "NAME_FAM", "NAME_SUBFAM", "Ref"]]

data = pd.pivot_table(data,
                      values = "PROFIT_SALES",
                      index = "MonthYear",
                      columns= ["NAME_SUBFAM"],
                      aggfunc="sum")

data = data.fillna(0)

import matplotlib.pyplot as plt

#plt.matshow(data.corr())
#plt.show()

mean_values_per_row = data.mean(axis=0)
std_dev_values_per_row = data.std(axis=0)

print(data.sum().sum())
sum_ = data.mean(axis=0)/data.sum(axis=0)
print(sum_)

sharpe = mean_values_per_row/std_dev_values_per_row

sharpe = pd.concat([sharpe, data.sum(axis=0)], ignore_index= False, axis = 1)
sharpe["VaR"] = mean_values_per_row-1.65*std_dev_values_per_row
sharpe.to_csv("sharpe.csv")

"""
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
import numpy as np

def dt64_to_float(dt64):
     year = dt64.astype('M8[Y]')
     days = (dt64 - year).astype('timedelta64[D]')
     year_next = year + np.timedelta64(1, 'Y')
     days_of_year = (year_next.astype('M8[D]') - year.astype('M8[D]')).astype('timedelta64[D]')
     dt_float = 1970 + year.astype(float) + days / (days_of_year)
     return dt_float

data.index = dt64_to_float(data.index.to_numpy())
obj_dict = {}

X_train, X_test, y_train, y_test = train_test_split(data.index.values.reshape(-1, 1), data, test_size=0.2, random_state=42)

for _col in data.columns:
    model = LinearRegression().fit(X_train, y_train[_col])
    obj_dict.update({_col: [model.predict(X_test), y_test]})

print(obj_dict)

from sklearn.linear_model import ElasticNet

elastic_net = ElasticNet(alpha=0.1, l1_ratio=0.5)

elastic_net.fit(X_train, y_train)
y_pred = elastic_net.predict(X_test)
"""

